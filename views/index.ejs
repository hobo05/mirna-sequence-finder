<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>

    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <!-- Optional theme -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">

	<link rel="stylesheet" type="text/css" href="styles.css">

  </head>
  <body>
	<div class="container">
		<h1><%= title %></h1>

		<%

		function getLabelClass(roundedPercentage) {
			let labelClass = "label-default";
			if (roundedPercentage >= 80) {
				labelClass = "label-success";
		    } else if (roundedPercentage >= 30) {
		    	labelClass = "label-warning";
		    } else if (roundedPercentage > 0) {
		    	labelClass = "label-danger";
		    }
		    return labelClass;
		}

		function getPercentageLabel(unroundedPercentage) {
		    let roundedPercentage = +(unroundedPercentage * 100).toFixed(2);
		    let labelClass = getLabelClass(roundedPercentage);
		    return `<span class="label ${labelClass}">${roundedPercentage}%</span>`;
		}

		function getTotalPercentage(subSequenceMatchResultsArray) {
			let unroundedPercentage = 0;
			subSequenceMatchResultsArray.forEach(matchResults => {
				unroundedPercentage += matchResults.percentage();
			});

		    return +(unroundedPercentage * 100).toFixed(2);
		}

		function highlight(sequence, substringTuple) {
			let subSequence = sequence.substring(substringTuple.start, substringTuple.end);
			return sequence.replace(new RegExp(subSequence), `<span class="highlight">${subSequence}</span>`);
		};

		%>

		<% sequenceMatchResultsArray.forEach(sequenceMatchResults => { %>
			<h2><%= sequenceMatchResults.sourceSequenceInfo.name %> vs <%= sequenceMatchResults.targetSequenceInfo.name %></h2>

			<% sequenceMatchResults.subSequenceMatchResultsArray.forEach(matchResults => { %>
			<div class="panel panel-default">
			  <div class="panel-heading">
			    <h3 class="panel-title">Matching Results for <%- highlight(matchResults.sourceSequenceInfo.sequence, matchResults.subSequenceSubstringTuple) %></h3>
			  </div>
			  <div class="panel-body">
			  	<div class="container">
			  		<h3><%- getPercentageLabel(matchResults.percentage()) %> Overlap</h3>
			  		<h4>Target Sequence: <%= matchResults.targetSequenceInfo.sequence %></h3>
					<ul class="list-group">
						<% matchResults.matchSubstringTupleArray.forEach((targetSubstringTuple, index) => { %>
					  	<li class="list-group-item">Match #<%= index+1 %> - <%- highlight(matchResults.targetSequenceInfo.sequence, targetSubstringTuple) %></li>
					  	<% }); %>
					</ul>
			  	</div>
			  </div>
			</div>
			<% }); %>

			<div class="panel panel-default">
			  <div class="panel-heading">
			    <h3 class="panel-title">Total Matching Percentage for <strong><%= sequenceMatchResults.sourceSequenceInfo.name %> vs <%= sequenceMatchResults.targetSequenceInfo.name %></strong></h3>
			  </div>
			  <div class="panel-body">
			  	<div class="container">
					<div class="progress">
						<% let totalPercentage = getTotalPercentage(sequenceMatchResults.subSequenceMatchResultsArray) %>
						<div class="progress-bar" role="progressbar" aria-valuenow="<%= totalPercentage %>" aria-valuemin="0" aria-valuemax="100" style="width: <%= totalPercentage %>%;">
					    	<%= totalPercentage %>%
					  	</div>
					</div>
			  	</div>
			  </div>
			</div>
		<% }); %>

	</div>

    <script type="text/javascript" src="bundle.js"></script>
  </body>
</html>
